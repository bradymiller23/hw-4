sessionInfo()
overview <- function(predicted, expected){
accuracy <- (expected - predicted) / length(expected)
error <- predicted / expected
total_false_positives <- sum(expected != predicted & expected == 0)
total_true_positives <- sum(expected == predicted & expected == 1)
total_false_negatives <- sum(expected != predicted & expected == 1)
total_true_negatives <- sum(expected == predicted & expected == 0)
false_positive_rate <- total_false_positives / (total_false_positives +
total_true_positives)
false_negative_rate <- total_false_negatives / (total_false_negatives +
total_true_negatives)
return(
data.frame(
accuracy = accuracy,
error=error,
false_positive_rate = false_positive_rate,
false_negative_rate = false_negative_rate
)
)
}
overview(df$y, df$y)
overview <- function(predicted, expected){
accuracy <- length(expected == predicted)/length(expected)
error <- length(expected != predicted) / length(expected)
total_false_positives <- length(expected != predicted & expected == 0)
total_true_positives <- length(expected == predicted & expected == 1)
total_false_negatives <- length(expected != predicted & expected == 1)
total_true_negatives <- length(expected == predicted & expected == 0)
false_positive_rate <- total_false_positives/(total_false_positives +
total_true_positives)
false_negative_rate <- total_false_negatives/(total_false_negatives +
total_true_negatives)
return(
data.frame(
accuracy = accuracy,
error=error,
false_positive_rate = false_positive_rate,
false_negative_rate = false_negative_rate
)
)
}
overview(df$y, df$y)
overview <- function(predicted, expected){
accuracy <- sum(expected == predicted)/length(expected)
error <- length(expected != predicted) / length(expected)
total_false_positives <- length(expected != predicted & expected == 0)
total_true_positives <- length(expected == predicted & expected == 1)
total_false_negatives <- length(expected != predicted & expected == 1)
total_true_negatives <- length(expected == predicted & expected == 0)
false_positive_rate <- total_false_positives/(total_false_positives +
total_true_positives)
false_negative_rate <- total_false_negatives/(total_false_negatives +
total_true_negatives)
return(
data.frame(
accuracy = accuracy,
error=error,
false_positive_rate = false_positive_rate,
false_negative_rate = false_negative_rate
)
)
}
overview(df$y, df$y)
overview(df$y, df$y)
overview <- function(predicted, expected){
accuracy <- sum(expected == predicted)/sum(expected)
error <- length(expected != predicted) / length(expected)
total_false_positives <- length(expected != predicted & expected == 0)
total_true_positives <- length(expected == predicted & expected == 1)
total_false_negatives <- length(expected != predicted & expected == 1)
total_true_negatives <- length(expected == predicted & expected == 0)
false_positive_rate <- total_false_positives/(total_false_positives +
total_true_positives)
false_negative_rate <- total_false_negatives/(total_false_negatives +
total_true_negatives)
return(
data.frame(
accuracy = accuracy,
error=error,
false_positive_rate = false_positive_rate,
false_negative_rate = false_negative_rate
)
)
}
overview(df$y, df$y)
overview <- function(predicted, expected){
accuracy <- sum(expected == predicted) / length(expected)
error <- length(expected != predicted) / length(expected)
total_false_positives <- sum(expected != predicted & expected == 0)
total_true_positives <- sum(expected == predicted & expected == 1)
total_false_negatives <- sum(expected != predicted & expected == 1)
total_true_negatives <- sum(expected == predicted & expected == 0)
false_positive_rate <- total_false_positives / (total_false_positives +
total_true_positives)
false_negative_rate <- total_false_negatives / (total_false_negatives +
total_true_negatives)
return(
data.frame(
accuracy = accuracy,
error=error,
false_positive_rate = false_positive_rate,
false_negative_rate = false_negative_rate
)
)
}
overview(df$y, df$y)
overview <- function(predicted, expected){
accuracy <- sum(expected == predicted) / length(expected)
error <- 1 - accuracy
total_false_positives <- sum(expected != predicted & expected == 0)
total_true_positives <- sum(expected == predicted & expected == 1)
total_false_negatives <- sum(expected != predicted & expected == 1)
total_true_negatives <- sum(expected == predicted & expected == 0)
false_positive_rate <- total_false_positives / (total_false_positives +
total_true_positives)
false_negative_rate <- total_false_negatives / (total_false_negatives +
total_true_negatives)
return(
data.frame(
accuracy = accuracy,
error=error,
false_positive_rate = false_positive_rate,
false_negative_rate = false_negative_rate
)
)
}
overview(df$y, df$y)
a <- c(1,2,3)
length(a)
overview <- function(predicted, expected){
accuracy <- expected[expected == predicted] / length(expected)
error <- 1 - accuracy
total_false_positives <-
total_true_positives <- sum(expected == predicted & expected == 1)
total_false_negatives <- sum(expected != predicted & expected == 1)
total_true_negatives <- sum(expected == predicted & expected == 0)
false_positive_rate <- total_false_positives / (total_false_positives +
total_true_positives)
false_negative_rate <- total_false_negatives / (total_false_negatives +
total_true_negatives)
return(
data.frame(
accuracy = accuracy,
error=error,
false_positive_rate = false_positive_rate,
false_negative_rate = false_negative_rate
)
)
}
overview(df$y, df$y)
overview(df$y, df$y)
overview <- function(predicted, expected){
accuracy <- expected[expected == predicted] / length(expected)
error <- 1 - accuracy
total_false_positives <- length(expected[expected != predicted & expected == 0])
total_true_positives <- length(expected[expected == predicted & expected == 1])
total_false_negatives <- length(expected[expected != predicted & expected == 1])
total_true_negatives <- length(expected[expected == predicted & expected == 0])
false_positive_rate <- total_false_positives / (total_false_positives +
total_true_positives)
false_negative_rate <- total_false_negatives / (total_false_negatives +
total_true_negatives)
return(
data.frame(
accuracy = accuracy,
error=error,
false_positive_rate = false_positive_rate,
false_negative_rate = false_negative_rate
)
)
}
overview(df$y, df$y)
overview <- function(predicted, expected){
accuracy <- sum(expected == predicted) / length(expected)
error <- 1 - accuracy
total_false_positives <- sum(expected != predicted & expected == 0)
total_true_positives <- sum(expected == predicted & expected == 1)
total_false_negatives <- sum(expected != predicted & expected == 1)
total_true_negatives <- sum(expected == predicted & expected == 0)
false_positive_rate <- total_false_positives / (total_false_positives +
total_true_positives)
false_negative_rate <- total_false_negatives / (total_false_negatives +
total_true_negatives)
return(
data.frame(
accuracy = accuracy,
error=error,
false_positive_rate = false_positive_rate,
false_negative_rate = false_negative_rate
)
)
}
overview(df$y, df$y)
?predict()
predicted <- predict(full_model)
predicted
full_model <-  glm(y ~., data = df2)
?glm()
full_model <-  glm(y ~., data = df2, family = binmoial())
full_model <-  glm(y ~., data = df2, family = binomial())
df2 <- df %>% select(-name)
full_model <-  glm(y ~., data = df2, family = binomial())
summary(full_model)
expected <- full_model$y
expected
expected <- df2$y
expected
View(df2)
# getting expected value for survival (survived = 1, died = 0)
expected <- df2$y
# getting predictions on the survival of Titanic passengers
predictions <- predict(full_model, newdata = df2)
# using overview func we created to see key performance metrics of full_model
overview(predictions, expected)
# getting predictions on the survival of Titanic passengers
predictions <- predict(full_model, newdata = df2)
predictions
full_model <-  glm(y ~ pclass + sex + age + `siblings spouses aboard` +
`parents children aboard` + fare, data = df,
family = binomial())
summary(full_model)
str(df)
full_model <-  glm(y ~ pclass + sex + age + `siblings spouses aboard` +
`parents children aboard` + fare, data = df,
family = binomial(link = 'logit'))
summary(full_model)
overview(df$y, df$y)
# getting predictions on the survival of Titanic passengers
predictions <- predict(full_model, newdata = df)
predictions
# getting expected value for survival (survived = 1, died = 0)
expected <- df2$y
# using overview func we created to see key performance metrics of full_model
overview(predictions, expected)
# getting expected value for survival (survived = 1, died = 0)
expected <- df$y
# using overview func we created to see key performance metrics of full_model
overview(predictions, expected)
overview <- function(predicted, expected){
accuracy <- sum(expected == predicted) / length(expected)
error <- 1 - accuracy
total_false_positives <- sum(expected != predicted & expected == 1)
total_true_positives <- sum(expected == predicted & expected == 2)
total_false_negatives <- sum(expected != predicted & expected == 2)
total_true_negatives <- sum(expected == predicted & expected == 1)
false_positive_rate <- total_false_positives / (total_false_positives +
total_true_positives)
false_negative_rate <- total_false_negatives / (total_false_negatives +
total_true_negatives)
return(
data.frame(
accuracy = accuracy,
error=error,
false_positive_rate = false_positive_rate,
false_negative_rate = false_negative_rate
)
)
}
overview(df$y, df$y)
overview(df$y, df$y)
# getting predictions on the survival of Titanic passengers
predictions <- predict(full_model, newdata = df)
predictions
# getting expected value for survival (survived = 1, died = 0)
expected <- df$y
# using overview func we created to see key performance metrics of full_model
overview(predictions, expected)
formula(lm(y ~ 1, df, family = binomial()))
null_model <- glm(y ~ 1, df, family = binomial())
null_model
step_model <- step(full_model, direction = 'backward', scope = formula(null_model))
summary(step_model)
step_predictions <- predict(step_model)... # Insert your code here
step_predictions <- predict(step_model)
overview(step_predictions, df$y)
step_predictions <- predict(step_model, data = df_)
step_predictions <- predict(step_model, data = df)
overview(step_predictions, df$y)
overview <- function(predicted, expected){
accuracy <- sum(expected == predicted) / length(expected)
error <- 1 - accuracy
total_false_positives <- sum(expected != predicted & expected == 0)
total_true_positives <- sum(expected == predicted & expected == 1)
total_false_negatives <- sum(expected != predicted & expected == 1)
total_true_negatives <- sum(expected == predicted & expected == 0)
false_positive_rate <- total_false_positives / (total_false_positives +
total_true_positives)
false_negative_rate <- total_false_negatives / (total_false_negatives +
total_true_negatives)
return(
data.frame(
accuracy = accuracy,
error=error,
false_positive_rate = false_positive_rate,
false_negative_rate = false_negative_rate
)
)
}
overview(df$y, df$y)
# getting predictions on the survival of Titanic passengers
predictions <- predict(full_model, newdata = df)
predictions
# getting expected value for survival (survived = 1, died = 0)
expected <- df$y
# using overview func we created to see key performance metrics of full_model
overview(predictions, expected)
... # Insert your code here
# getting predictions on the survival of Titanic passengers
predictions <- predict(full_model, newdata = df)
# getting expected value for survival (survived = 1, died = 0)
expected <- df$y
# using overview func we created to see key performance metrics of full_model
overview(predictions, expected)\
# using overview func we created to see key performance metrics of full_model
overview(predictions, expected)
# creating null model which backwards stepwise logistic regression will end at
null_model <- glm(y ~ 1, df, family = binomial())
# creating the backwards stepwise logistic regression model
step_model <- step(full_model, direction = 'backward', scope = formula(null_model))
summary(step_model)
step_predictions <- predict(step_model, data = df)
step_predictions
predictions
# getting predictions on the survival of Titanic passengers
predictions <- predict(full_model, newdata = df)
# getting expected value for survival (survived = 1, died = 0)
expected <- df$y
# using overview func we created to see key performance metrics of full_model
overview(predictions, expected)
# creating null model which backwards stepwise logistic regression will end at
null_model <- glm(y ~ 1, df, family = binomial())
# creating the backwards stepwise logistic regression model
step_model <- step(full_model, direction = 'backward', scope = formula(null_model))
summary(step_model)
step_predictions <- predict(step_model, data = df)
overview(step_predictions, df$y)
controls <- trainControl(method = 'cv', number = 5) # ... insert your code here
packages <- c(
"dplyr",
"readr",
"tidyr",
"purrr",
"stringr",
"corrplot",
"car",
"caret",
"torch",
"nnet",
"broom"
)
# renv::install(packages)
sapply(packages, require, character.only=T)
renv::install(packages)
packages <- c(
"dplyr",
"readr",
"tidyr",
"purrr",
"stringr",
"corrplot",
"car",
"caret",
"torch",
"nnet",
"broom"
)
renv::install(packages)
sapply(packages, require, character.only=T)
controls <- trainControl(method = 'cv', number = 5)
controls
?train()
# Insert your code in the ... region
lasso_fit <- train(
x = df,
y = y,
method = 'glmnet',
trControl = controls,
tuneGrid = expand.grid(
alpha = 1,
lambda = 2^seq(-20, 0, by = 0.5)
),
family = 'gaussian'
)
# Insert your code in the ... region
lasso_fit <- train(
x = df,
y = df$y,
method = 'glmnet',
trControl = controls,
tuneGrid = expand.grid(
alpha = 1,
lambda = 2^seq(-20, 0, by = 0.5)
),
family = 'gaussian'
)
df[,1:7]
df[,2:7]
df[,c(2,4,5,6,7)]
# Insert your code in the ... region
lasso_fit <- train(
x = df[,c(2,4,5,6,7)],
y = df$y,
method = 'glmnet',
trControl = controls,
tuneGrid = expand.grid(
alpha = 1,
lambda = 2^seq(-20, 0, by = 0.5)
),
family = 'gaussian'
)
# Insert your code in the ... region
lasso_fit <- train(
x = df[,c(2,4,5,6,7)],
y = df$y,
method = 'glmnet',
trControl = controls,
tuneGrid = expand.grid(
alpha = 0.01,
lambda = 2^seq(-20, 0, by = 0.5)
),
family = 'gaussian'
)
lasso_fit <- train(
x = df[,c(2,4,5,6,7)],
y = df$y,
method = 'glmnet',
trControl = controls,
tuneGrid = expand.grid(
alpha = 1,
lambda = 2^seq(-20, 0, by = 0.5)
),
family = 'gaussian'
)
as.numeric(df$y)
lasso_fit <- train(
x = df[,c(2,4,5,6,7)],
y = as.numeric(df$y),
method = 'glmnet',
trControl = controls,
tuneGrid = expand.grid(
alpha = 1,
lambda = 2^seq(-20, 0, by = 0.5)
),
family = 'gaussian'
)
covariate_matrix <- model.matrix(full_model)[, -1]
covariate_matrix
lasso_fit <- train(
x = full_model[,-1],
y = df$y,
method = 'glmnet',
trControl = controls,
tuneGrid = expand.grid(
alpha = 1,
lambda = 2^seq(-20, 0, by = 0.5)
),
family = 'gaussian'
)
full_model[,-1]
X <- torch_tensor(covariate_matrix, dtype = torch_float()) # Insert your code here
y <- torch_tensor(df$y, dtype = torch_float())
nn_linear()
?nn_linear()
logistic <- nn_module(
initialize = function() {
self$f <- nn_linear(6,1) # Insert your code here
self$g <- nn_sigmoid() # Insert your code here
},
forward = function(x) {
x %>%
self$f() %>%
self$g()
}
)
f <- logistic()
f
f(X)
Loss <- function(X, y, Fun){
y_pred <- Fun(X)
return(mean((y_pred - y)^2))
}
Loss(x_tensor, y_tensor, logistic_reg)
Loss(x_tensor, y_tensor, logistic)
f <- logistic()
optimizer <- optim_adam(logistic$parameters, lr=0.0001) # Insert your code here
n <- 1000
optimizer <- optim_adam(logistic$parameters, lr=0.0001) # Insert your code here
n <- 1000
loss <- L(x_tensor, y_tensor, logistic)
for (i in 1:epochs){
loss <- Loss(x_tensor, y_tensor, logistic)
optimizer$zero_grad()
loss$backward()
optimizer$step()
if (i %% 1000 == 0) {
cat(sprintf('Epoch: %d, Loss: %.6f\n', i, loss$item()))
}
}
for (i in 1:n){
loss <- Loss(x_tensor, y_tensor, logistic)
optimizer$zero_grad()
loss$backward()
optimizer$step()
if (i %% 1000 == 0) {
cat(sprintf('Epoch: %d, Loss: %.6f\n', i, loss$item()))
}
}
predicted_probabilities <- f(X) %>% as_array()
torch_predictions <- predict(predicted_probabilities)
renv::status()
renv::restore()
